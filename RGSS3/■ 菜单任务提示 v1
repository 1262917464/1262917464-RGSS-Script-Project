#encoding:utf-8
#==============================================================================
# ■ 菜单任务提示 v1 by 1262917464
#------------------------------------------------------------------------------
# 　使用方法：
#   脚本set_task_text(text)
#   例如set_task_text("你妈今天要几分熟")
#   按确定/返回键返回菜单
#
#   以下皆不支持游戏内修改
#   菜单要修改文案的话在 #菜单显示选项文字 修改
#   行数要修改的话在 #文本显示行数 修改
#------------------------------------------------------------------------------
#	版权所有（C）<2021> <1262917464>
#	本程序为自由软件，在自由软件联盟发布的GNU通用公共许可协议的约束下，你可以对其进行再发布及修改。协议版本为第三版或（随你）更新的版本。
#	我们希望发布的这款程序有用，但不保证，甚至不保证它有经济价值和适合特定用途。详情参见GNU通用公共许可协议。
#	你理当已收到一份GNU通用公共许可协议的副本，如果没有，请查阅<http://www.gnu.org/licenses/>
#==============================================================================

class Window_MenuCommand < Window_Command
  alias command_task_add_original_commands add_original_commands
  def add_original_commands
    command_task_add_original_commands
    add_command("任务提示",   :task,   true) #菜单显示选项文字
  end
end

#==============================================================================
# ■ Window_Task
#------------------------------------------------------------------------------
# 　显示特技和物品等的说明、以及角色状态的窗口
#==============================================================================

class Window_Task < Window_Base
  #--------------------------------------------------------------------------
  # ● 初始化对象
  #--------------------------------------------------------------------------
  def initialize(line_number = 5) #文本显示行数
    super(0, 0, Graphics.width, fitting_height(line_number))
    self.y = (Graphics.height - height) / 2
    @handler = {}
  end
  #--------------------------------------------------------------------------
  # ● 设置内容
  #--------------------------------------------------------------------------
  def set_text(text)
    if text != @text
      @text = text
      refresh
    end
  end
  #--------------------------------------------------------------------------
  # ● 清除
  #--------------------------------------------------------------------------
  def clear
    set_text("")
  end
  #--------------------------------------------------------------------------
  # ● 刷新
  #--------------------------------------------------------------------------
  def refresh
    contents.clear
    draw_text_ex(4, 0, @text)
  end
  
  #--------------------------------------------------------------------------
  # ● 设置动作对应的处理方法
  #     method : 设置的处理方法 (Method 实例)
  #--------------------------------------------------------------------------
  def set_handler(symbol, method)
    @handler[symbol] = method
  end
  #--------------------------------------------------------------------------
  # ● 确认处理方法是否存在
  #--------------------------------------------------------------------------
  def handle?(symbol)
    @handler.include?(symbol)
  end
  #--------------------------------------------------------------------------
  # ● 调用处理方法
  #--------------------------------------------------------------------------
  def call_handler(symbol)
    @handler[symbol].call if handle?(symbol)
  end

  #--------------------------------------------------------------------------
  # ● 更新画面
  #--------------------------------------------------------------------------
  def update
    super
    process_handling
  end
  
  #--------------------------------------------------------------------------
  # ● “确定”和“取消”的处理
  #--------------------------------------------------------------------------
  def process_handling
#~     return unless open? && active
    return process_cancel   if cancel_enabled?    && (Input.trigger?(:B) or Input.trigger?(:C))
  end
  #--------------------------------------------------------------------------
  # ● 获取确定处理的有效状态
  #--------------------------------------------------------------------------
  def ok_enabled?
    handle?(:ok)
  end
  #--------------------------------------------------------------------------
  # ● 获取取消处理的有效状态
  #--------------------------------------------------------------------------
  def cancel_enabled?
    handle?(:cancel)
  end
  #--------------------------------------------------------------------------
  # ● 按下取消键时的处理
  #--------------------------------------------------------------------------
  def process_cancel
    Sound.play_cancel
    Input.update
    deactivate
    call_cancel_handler
  end
  #--------------------------------------------------------------------------
  # ● 调用“取消”的处理方法
  #--------------------------------------------------------------------------
  def call_cancel_handler
    call_handler(:cancel)
  end
  
end

#==============================================================================
# ■ Scene_Task
#------------------------------------------------------------------------------
# 　任务画面
#==============================================================================

class Scene_Task < Scene_Base
  #--------------------------------------------------------------------------
  # ● 开始处理
  #--------------------------------------------------------------------------
  def start
    super
    create_background
    create_task_window 
  end
  #--------------------------------------------------------------------------
  # ● 生成帮助窗口
  #--------------------------------------------------------------------------
  def create_task_window
    @task_window = Window_Task.new
    @task_window.viewport = @viewport
    @task_window.set_text($game_party.task_text)
    @task_window.set_handler(:cancel, method(:return_scene))
  end
  
  #--------------------------------------------------------------------------
  # ● 结束处理
  #--------------------------------------------------------------------------
  def terminate
    super
    dispose_background
  end
  #--------------------------------------------------------------------------
  # ● 生成背景
  #--------------------------------------------------------------------------
  def create_background
    @background_sprite = Sprite.new
    @background_sprite.bitmap = SceneManager.background_bitmap
    @background_sprite.color.set(16, 16, 16, 128)
  end
  #--------------------------------------------------------------------------
  # ● 释放背景
  #--------------------------------------------------------------------------
  def dispose_background
    @background_sprite.dispose
  end
end

class Scene_Menu < Scene_MenuBase
  #--------------------------------------------------------------------------
  # ● 生成指令窗口
  #--------------------------------------------------------------------------
  alias command_task_command_window create_command_window
  def create_command_window
    change_font_create_command_window
    @command_window.set_handler(:task,      method(:command_task))
  end
  
  def command_task
    SceneManager.call(Scene_Task)
  end
end

class Game_Party < Game_Unit
  attr_accessor :task_text
  alias task_initialize initialize
  def initialize
    task_initialize
    @task_text = ""
  end
end

class Game_Interpreter
  def set_task_text(text)
    $game_party.task_text = text
  end
end
